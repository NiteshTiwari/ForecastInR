is.numeric(p1[[6]])
is.numeric(p1)
p1[[6]] == numeric(0)
numeric(0)
p1[6] == numeric(0)
p1[6]
p1[6] == ""
p1[6] == ''
p1[6] == NA
is.na(p1[6])
is.na(p1[[6]])
?numeric
print(p1[6])
print(p1[[6]])
class(p1[[6]])
mode(p1[[6]])
as.numeric(p1[[6]])
as.numeric(p1[[5]])
identical(x, numeric(0))
identical(p1[6], numeric(0))
identical(p1[[6]], numeric(0))
identical(p1, numeric(0))
defaultValue(p1[6])
defaultValue <- function(item) {
if (identical(item,numeric(0))) {
return 0
}
return item
}
defaultValue <- function(item) {
if (identical(item,numeric(0)) == TRUE) {
return 0
}
return item
}
defaultValue <- function(item) {
if (identical(item,numeric(0)) == TRUE) {
0
}
item
}
if (identical(p1[6], numeric(0))) { print("asda")}
if (identical(p1[[6]], numeric(0))) { print("asda")}
defaultValue <- function(item) {
if( identical(item, numeric(0))) {
0
}
item
}
defaultValue(p1[6])
lapply(p1,"defaultValue")
p1[6]
class(p1[6])
mode(p1[6])
mode(p1[5])
class(p1[5])
p1[6]
p1[6][1]
mode(p1[[5]])
mode(p1[[6]])
class(p1[[6]])
as.numeric(p1[5])
as.numeric(p1[6])
defaultValue <- function(item) {
if( is.na(as.numeric(item))) {
0
}
item
}
defaultValue(p1[6])
as.numeric(p1[6])
as.numeric(p1[5])
is.na(as.numeric(p1[6]))
if(is.na(as.numeric(p1[6])))
{0}
defaultValue <- function(item) {
if( is.na(as.numeric(item))) {
return 0
}
return item
}
defaultValue <- function(item) {
if( is.na(as.numeric(item))) {
return(0)
}
return(item)
}
defaultValue(p1[5])
defaultValue(p1[6])
lapply(p1,"defaultValue")
lapply(p1,"defaultValue")
defaultValue(p1[[6]])
as.numeric(p1[[6]])
identical(p1[[6]], numeric(0))
defaultValue <- function(item) {
if( identical(item, numeric(0))) {
return(0)
}
return(item)
}
lapply(p1, "defaultValue")
lapply(p1, "defaultValue")[6]
source('D:/temp/Forecasting POC/poc.r')
start
p1[35]
start -29
p1[6]
source('D:/temp/Forecasting POC/poc.r')
start
m1
p1[6]
source('D:/temp/Forecasting POC/poc.r')
start
p <- daySales[daySales$V2 == 10, 3]
p <- entries[entries$V2 == 10, 3]
p1
source('D:/temp/Forecasting POC/poc.r')
p1
lapply(p1, "defaultValue")
entries[6]
entries[[6]]
p <- filterProduct(entries[[6]])
exit
p <- filterProduct(entries[[6]], 10)
p[6]
p[5]
p <- filterProduct(entries[[6]], 10)
p
p <- filterProduct(entries[6], 10)
p <- filterProduct(entries[[6]], 10)
p
defaultValue(p)
class(p)
mode(p)
as.numeric(p)
source('D:/temp/Forecasting POC/poc.r')
m1
dim(m)
dim(m1)
m1[271,]
p1
m1[271,]
tail(p1)
m1[1,]
m1[271,]
p1
entries[[1]]
entries[[300]][1]
entries[[300]][1,]
entries[[299]][1,]
p1[300]
p1[299]
entries[[1]][1,]
entries[[2]][1,]
p1[1]
p1[2]
m1[1,]
m1[0,]
m1[1,]
View(`m1`)
source('D:/temp/Forecasting POC/poc.r')
View(`m1`)
b<- data.frame()
b <- rbind(b, c(1,2,3))
b
b <- rbind(b, c(4,5,6))
b
source('D:/temp/Forecasting POC/poc.r')
source('D:/temp/Forecasting POC/poc.r')
View(`m1`)
p1[3]
p1[4]
?paste
?paste0
paste("Day-", c(1:20))
paste0("Day-", c(1:20))
paste0("Day-", c(0:20))
colnames(m1, paste0("Day-",c(0:29)))
colnames(m1) <- paste0("Day-",c(0:29))
m1
View(`m1`)
source('D:/temp/Forecasting POC/poc.r')
source('D:/temp/Forecasting POC/poc.r')
View(`m1`)
library("neuralnet")
version
?neuralnet
View(`m1`)
AND <- c(rep(0,7),1)
OR <- c(0,rep(1,7))
binary.data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
neuralnet("AND+OR~Var1+Var2+Var3", binary.data, hidden=0, rep=10, err.fct="ce", linear.output=FALSE)
net <- neuralnet("AND+OR~Var1+Var2+Var3", binary.data, hidden=0, rep=10, err.fct="ce", linear.output=FALSE)
print(net)
paste0("Day-", c(1:29))
paste("+",paste0("Day-", c(1:29)))
paste0(paste0("Day-", c(1:29)),sep="~")
paste(paste0("Day-", c(1:29)),sep="~")
?concat
??concat
?paste
paste0("a","b","c")
paste0("Day-", c(1:29))
paste0("Day-", c(1:29), sep="+")
paste(paste0("Day-", c(1:29), sep="+"))
paste0("Day-", c(1:29), collapse="+")
form <- paste0("Day-", c(1:29), collapse="+")
paste("Day-0~", form)
paste0("Day-0~", form)
form <- paste0("Day-0~", form)
dim(m1)
m1[1:50]
m1[1:50,]
View(m1[1:50,])
net <- neuralnet(form, m1[1:50,], hidden=2)
colnames(m1) <- paste0("Day",c(0:29))
View(m1)
form <- paste0("Day", c(1:29), collapse="+")
form
form <- paste0("Day0~", form)
form
net <- neuralnet(form, m1[1:50,], hidden=2)
net
?neuralnet
net <- neuralnet(form, m1[1:50,], hidden=c(10,10), rep=10, linear.output=FALSE)
net
compute(net, m1[51])
compute(net, m1[51,])
m[51]
m1[51]
m1[51,]
m1[51,-1]
compute(net, m1[51,-1])
m1[51]$Day0
m1[[51]]
m1[[51]]$Day0
m1[[51]][0]
m1[51,1]
compute(net, m1[51,-1])
compute(net, m1[52,-1])
compute(net, m1[53,-1])
?predict
compute(net, m1[51,-1], rep=10)
net <- neuralnet(form, m1[1:50,], hidden=3, rep=10, linear.output=FALSE)
compute(net, m1[51,-1])
compute(net, m1[51,-1], rep=10)
net <- neuralnet(form, m1[1:50,], hidden=3, rep=100, linear.output=FALSE)
compute(net, m1[51,-1], rep=10)
net <- neuralnet(form, m1[1:50,], hidden=c(3,3), rep=100, linear.output=FALSE)
compute(net, m1[51,-1], rep=10)
form
iristrain
?neuralnet
AND <- c(rep(0,7),1)
OR <- c(0,rep(1,7))
binary.data <- data.frame(expand.grid(c(0,1), c(0,1), c(0,1)), AND, OR)
AND
OR
binary.data
net <- neuralnet("AND+OR~Var1+Var2+Var3", binary.data, hidden=0, rep=10, err.fct="ce")
warnings
warnings()
net <- neuralnet("AND+OR~Var1+Var2+Var3", binary.data, hidden=0, rep=10, err.fct="ce", linear.output=FALSE)
net <- neuralnet("AND+OR~Var1+Var2+Var3", binary.data, hidden=0, rep=10, err.fct="ce", linear.output=FALSE)
compute(net, expand.grid(0,0,0))
compute(net, expand.grid(0,0,1))
?random
??random,
??random
sample(c(1:1000),10)
sample(c(1:1000),10)^2
r <- sample(c(1:1000),10)
data = data.frame(r, r^2)
data
colnames(data) <- c("Var1, Var2")
data
data = data.frame(r, r^2)
data
colnames(data) <- cbind("Var1, Var2")
data
colnames(data) <- cbind("Var1, Var2")
data
data
data = data.frame(r, r^2)
data
colnames(data)
colnames(data) <- rbind("Var1", "Var2")
data
net <- neuralnet("Var1~Var2", data)
net
compute(net, 12)
12^2
net <- neuralnet("Var2~Var1", data)
net <- neuralnet("Var2~Var1", data, hidden=1)
net <- neuralnet("Var2~Var1", data, hidden=1, rep=10)
net <- neuralnet("Var2~Var1", data, hidden=1, rep=2)
data
129^2
net <- neuralnet("Var2~Var1", data, hidden=3, rep=2)
?neuralnet
net <- neuralnet("Var2~Var1", data, hidden=c(3))
net <- neuralnet("Var2~Var1", data=data, hidden=c(3))
data
data$Var1
data$Var2
data
net <- neuralnet(Var2~Var1, data=data, hidden=c(3))
net <- neuralnet(Var2~Var1, data=data, hidden=0)
net <- neuralnet(Var2~Var1, data=data, hidden=3)
net <- neuralnet(Var2~Var1, data=data, hidden=1)
net
?as.formua
?as.formula
terms(Var2 ~ Var1)
terms(Var2~Var1)
terms("Var2~Var1")
terms(as.formula("Var2~Var1"))
?neuralnet
net <- neuralnet(Var2~Var1, data=data, hidden=10, threshold=0.01)
net <- neuralnet("Var2~Var1", data=data, hidden=10, threshold=1)
net <- neuralnet("Var2~Var1", data=data, hidden=10, threshold=10)
net <- neuralnet("Var2~Var1", data=data, hidden=10, threshold=1000)
net <- neuralnet(Var2~Var1, data=data, hidden=10, threshold=100000)
net <- neuralnet(Var2~Var1, data, hidden=10, threshold=100000)
net <- neuralnet(Var1~Var2, data, hidden=10, threshold=1)
net
compute(net,10)
compute(net,1)
net <- neuralnet(Var1~Var2, data, hidden=10, threshold=0.01)
compute(net,1)
compute(net,10)
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
#Plot the neural network
plot(net.sqrt)
#Test the neural network on some training data
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
trainingdata
neuralnet(Input~Output, trainingdata, hidden=10, threshold=0.01)
net.sqr <- neuralnet(Input~Output, trainingdata, hidden=10, threshold=0.01)
compute(net.sqr, 100)
compute(net.sqr, 10)
compute(net.sqr, 100)
compute(net.sqr, 120)
compute(net.sqr, 3)
compute(net.sqr, 4)
net.sqr <- neuralnet("Input~Output", trainingdata, hidden=10, threshold=0.01)
compute(net.sqr, 10)
compute(net.sqr, 9)
compute(net.sqr, 200)
compute(net.sqr, 3)
compute(net.sqr, 3.3)
data
sample(c(1:100), n=40)
sample(c(1:100), 40)
r <- sample(c(1:100), 40)
data <- data.frame(r,r^2, colnames=c("In", "Out"))
data
data <- data.frame(r,r^2)
data
net <- neuralnet(r~r.2, data, threshold=0.1)
compute(net,4)
plot(net)
net <- neuralnet(r~r.2, data, hidden=10, threshold=0.1)
plot(net)
net <- neuralnet(r~r.2, data, hidden=100, threshold=0.1)
plot(net)
compute(net, 4)
compute(net, 2)
compute(net, 10)
compute(net, 22)
net <- neuralnet(r~r.2, data, hidden=c(5,5), threshold=0.1)
plot(net)
compute(net,4)
compute(net,1)
compute(net,23)
compute(net,24)
data
sort(data$r)
data[sort(data$r)]
data[sort(data$r),]
r<- sort(r)
r
data<- data.frame(r, r^2)
data
net <- neuralnet(r~r.2, data, hidden=c(5,5), threshold=0.1)
plot(net)
plot(net)
compute(net,4)
compute(net,16)
compute(net,17)
net <- neuralnet(r~r.2, data, hidden=c(5,5), threshold=0.01)
compute(net,17)
net.a <- neuralnet(r~r.2, data, hidden=c(5,5), threshold=0.01)
compute(net.a,17)
compute(net.a,2)
net.a <- neuralnet(r.2~r, data, hidden=c(5,5), threshold=0.01)
compute(net.a,2)
compute(net.a,100)
data
net.a <- neuralnet(r.2~r, data, hidden=c(10), threshold=0.01)
net.a <- neuralnet(r.2~r, data, hidden=c(20), threshold=0.01)
net.a <- neuralnet(r.2~r, data, hidden=c(10,10), threshold=0.01)
compute(net.a,100)
plot(net.a)
net.a <- neuralnet(r.2~r, data, hidden=c(10,10), threshold=0.01, rep=10)
net.a <- neuralnet(r.2~r, data, hidden=c(3,3,3), threshold=0.01, rep=10)
net.a <- neuralnet(r.2~r, data, hidden=c(3,3,3), threshold=0.01, rep=2)
compute(net.a,100)
compute(net.a,10)
data
compute(net.a,91)
compute(net.a,50)
plot(net.a)
?neuralnet
net.a <- neuralnet(r.2~r, data, hidden=c(10), threshold=0.01, rep=2, linear.output = FALSE)
compute(net.a,50)
compute(net.a,51)
compute(net.a,100)
net.a <- neuralnet(r.2~r, data, hidden=c(10), threshold=0.01, rep=2, linear.output = TRUE)
compute(net.a,100)
net.a <- neuralnet(r.2~r, data, hidden=c(10), threshold=0.01, rep=2, act.fct="logicistic")
net.a <- neuralnet(r.2~r, data, hidden=c(10), threshold=0.01, rep=2, act.fct="logicistic")
net.a <- neuralnet(r.2~r, data, hidden=c(10), threshold=0.01, rep=2, err.fct="sse")
plot(net.a)
compute(net.a,10)
compute(net.a,100)
net.a <- neuralnet(r.2~r, data, hidden=c(10), threshold=0.01, rep=2, err.fct="sse", act.fct = "logistic")
compute(net.a,100)
compute(net.a,10)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
plot(net.sqrt)
net.sqrt
net.a <- neuralnet(r.2~r, data, hidden=10, threshold=0.01)
net.a <- neuralnet(r.2~r, data, hidden=100, threshold=0.01)
?neuralnet
net.a <- neuralnet(r.2~r, data, hidden=10, threshold=0.01, lifesign="minimal")
net.a <- neuralnet(r.2~r, data, hidden=10, threshold=0.01, lifesign="full")
net.a <- neuralnet(r.2~r, data, hidden=20, threshold=0.01, lifesign="full")
net.a <- neuralnet(r.2~r, data, hidden=c(10,10), threshold=0.01, lifesign="full")
net.a <- neuralnet(r.2~r, data, hidden=c(10,10,10), threshold=0.01, lifesign="full")
net.a <- neuralnet(r.2~r, data, hidden=c(10,10,10,10), threshold=0.01, lifesign="full")
net.a <- neuralnet(r.2~r, data, hidden=c(3,10), threshold=0.01, lifesign="full")
net.a <- neuralnet(r.2~r, data, hidden=c(3,10), threshold=0.01, lifesign="full", algorithm="rprop+")
net.a <- neuralnet(r.2~r, data, hidden=c(3,10), threshold=0.01, lifesign="full", algorithm="sag")
net.a <- neuralnet(r.2~r, data, hidden=c(3,10), threshold=0.01, lifesign="full", algorithm="slr")
net.a <- neuralnet(r.2~r, data, hidden=c(3,10), threshold=0.01, lifesign="full", algorithm="backprop")
net.a <- neuralnet(r.2~r, data, hidden=c(3,10), threshold=0.01, lifesign="full", algorithm="backprop", learningrate=10)
net.a <- neuralnet(r.2~r, data, hidden=c(3,10), threshold=0.01, lifesign="full", rep=2)
net.a <- neuralnet(r.2~r, data, hidden=c(10), threshold=0.01, lifesign="full", rep=5)
net.a
r
r <- sample
r <- sample(c(1:100), 40)
dataf <- data.frame(r,r^2)
dataf
72^2
net.a <- neuralnet(r~r.2, dataf, hidden=10, threshold=10, lifesign=full)
net.a <- neuralnet(r~r.2, dataf, hidden=10, threshold=10, lifesign="full")
compute(net.a, 10)
compute(net.a, 100)
compute(net.a, 200)
net.b <- neuralnet(r.2~r, dataf, hidden=10, threshold=10, lifesign="full")
net.b <- neuralnet(r.2~r, dataf, hidden=10, threshold=10, lifesign="full", stepmax=10^8)
compute(net.b, 10)
compute(net.b, 100)
compute(net.b, 21)
compute(net.b, 25)
net.b <- neuralnet(r.2~r, dataf, hidden=c(5,5), threshold=10, lifesign="full", stepmax=10^8)
net.b <- neuralnet(r.2~r, dataf, hidden=c(20), threshold=10, lifesign="full", stepmax=10^8)
compute(net.b, 25)
compute(net.b, 145)
compute(net.b, 14)
compute(net.b, 200)
net.b <- neuralnet(r.2~r, dataf, hidden=c(30), threshold=10, lifesign="full", stepmax=10^8)
compute(net.b, 200)
compute(net.b, 100)
compute(net.b, 99)
net.b <- neuralnet(r.2~r, dataf, hidden=c(3,3,3), threshold=10, lifesign="full", stepmax=10^8)
net.b <- neuralnet(r.2~r, dataf, hidden=c(10,3,3), threshold=10, lifesign="full", stepmax=10^8)
net.b <- neuralnet(r.2~r, dataf, hidden=c(3,10,3), threshold=10, lifesign="full", stepmax=10^8)
net.b <- neuralnet(r.2~r, dataf, hidden=c(3), threshold=10, lifesign="full", stepmax=10^8)
net.b <- neuralnet(r.2~r, dataf, hidden=c(100), threshold=10, lifesign="full", stepmax=10^8)
compute(net.b, 99)
compute(net.b, 200)
compute(net.b, 51)
compute(net.b, 23)
net.b
net.b <- neuralnet(r.2~r, dataf, hidden=c(300), threshold=10, lifesign="full", stepmax=10^8)
compute(net.b, 23)
compute(net.b, 51)
compute(net.b, 200)
compute(net.b, 101)
